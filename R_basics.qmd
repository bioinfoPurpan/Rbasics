---
title: "R Basics"
author : "Rüçhan Eker, Jean Monlong, Margot Zahm"
format: 
    revealjs:
        theme: white
slide-level: 2
---

# Why R?

## Why R?

::: { .callout appearance="simple" }
### Simple

- Interpretative language (no compilation needed)
- No manual memory management
- Vectorized
:::

::: { .callout appearance="simple" }
### Free

- Widely used, vast community of R users
- Good life expectancy
:::

## Why R?

::: { .callout appearance="simple" }
### Flexible

- Open-source: anyone can see/create/modify
- Multiplatform: Windows, Mac, Unix... It works everywhere
:::

::: { .callout appearance="simple" }
### Trendy

- More and more packages
- More and more popular among data scientists and (now) biologists
:::

## Workshop Setup

<div style="display: flex; align-items: center;">
  <ul style="margin: 0; padding: 0;">
    <li style="list-style: none;">Open </li>
  </ul>
  <img src="images/Rlogo.svg" alt="Logo" style="height: 0.5in; margin-left: 15px;"/>
</div>

![](images/Rscreenshot.JPG){width=60%}

## Workshop Setup {auto-animate=true}

<div style="display: flex; align-items: center;">
  <ul style="margin: 0; padding: 0;">
    <li style="list-style: none;">Open </li>
  </ul>
  <img src="images/RStudio_Logo.png" alt="Logo" style="height: 0.5in; margin-left: 15px;"/>
</div>

![](images/Rstudio_screenshot.JPG){width=50%}

## Workshop Setup {auto-animate=true}

Open a new R script file (File > New File > R Script)

![](images/Rstudio_script_screenshot.JPG){width=50%}

## Workshop Setup {auto-animate=true}

::: {.columns}
::: {.column}
![](images/Rstudio_script_screenshot_annotations.png)
:::
::: {.column}
::: {.fragment}
::: { .callout appearance="simple" }
### Console

- Where R is running
- You can write and run the commands directly here
- Your command executes when you press Enter
:::
:::
:::
:::

## Workshop Setup {auto-animate=true}

::: {.columns}
::: {.column}
![](images/Rstudio_script_screenshot_annotations.png)
:::
::: {.column}
::: { .callout appearance="simple" }
### Console
:::

::: { .callout appearance="simple" }
### Script

- A text file with commands. *Extension .R*
- To keep a trace of your analysis
- Highly recommended
- Run commands from a script to the console with Run button
:::
:::
:::

## Workshop Setup {auto-animate=true}

::: {.columns}
::: {.column}
![](images/Rstudio_script_screenshot_annotations.png)
:::
::: {.column}
::: { .callout appearance="simple" }
### Console
:::

::: { .callout appearance="simple" }
### Script
:::

::: { .callout appearance="simple" }
### Tracking panel
- List all **variables** you generated
- An **history** of the commands you ran
:::
:::
:::

## Workshop Setup {auto-animate=true}

::: {.columns}
::: {.column}
![](images/Rstudio_script_screenshot_annotations.png)
:::
::: {.column}
::: { .callout appearance="simple" }
### Console
:::

::: { .callout appearance="simple" }
### Script
:::

::: { .callout appearance="simple" }
### Tracking panel
:::

::: { .callout appearance="simple" }
### Multipurpose panel
Check **files** in your computer, see **plots**, manage **packages**, read **help** section of a function.
:::
:::
:::

## Workshop Setup {auto-animate=true}

::: {.columns}
::: {.column}
![](images/Rstudio_script_screenshot_annotations.png)
:::
::: {.column}
::: { .callout appearance="simple" }
### Console
:::

::: { .callout appearance="simple" }
### Script
:::

::: { .callout appearance="simple" }
### Tracking panel
:::

::: { .callout appearance="simple" }
### Multipurpose panel
:::
:::
:::

::: {.callout-caution}
Write everything you do in scripts to avoid loosing your work.
:::

## When you get an error

::: { .callout appearance="simple" }
1. Read the command, look for typos
2. Read the error message
3. 1. and 2. again
4. Raise your hand, someone will assist you
:::

::: {.fragment}
::: {.callout-tip}
Solving errors is an important skill to learn.
:::
:::

# Objects

## Objects - Overview

::: { .callout appearance="simple" }
### Unit type

::: {.columns}
::: {.column}
- **numeric** e.g. numbers

```{r}
0.1
42
-10e6
```

- **logical Binary** two possible values
```{r}
TRUE
FALSE
```
:::
::: {.column}
- **character** e.g. words between `"`
```{r}
"male"
'ENSG007'
"Allez les bleus"
```

- **comment**: line starting by **#**
```{.r}
# This is a comment line
# I can write everythin I want
```
:::
:::
:::

::: {.fragment}
::: {.callout-tip}
Comment your script to help you remember what you have done.
:::
:::

## Objects - Overview

::: { .callout appearance="simple" }
### Complex type

- **vector**: Ordered collection of elements of the same type
```{r}
seq(1, 10, 2)
```
- **list**: Flexible container, mixed type possible. Recursive
```{r}
list(name = "John Doe",
      age = "40",
      skills = c("sing", "dance", "run"),
      glasses = FALSE)
```
:::

## Objects - Overview

::: { .callout appearance="simple" }
### Complex type

- **matrix**: Table of elements of the same type
```{r}
matrix(c(1:6), 
        nrow = 2, ncol = 3)
matrix(c("one", "two", "three", 1:6), 
        nrow = 3, ncol = 3)
```
- **data.frame**: Table of mixed type elements
```{r}
data.frame(
  Name = c("John", "Jane"),
  Age = c(25, 30),
  IsStudent = c(TRUE, FALSE)
)
```
:::

::: {.fragment}
::: {.callout-note}
These are the basic complex types. It exists a lot of different complex objects which mix all these basic objects.
:::
:::

## Objects - Naming conventions

::: { .callout appearance="simple" }
- Use letters, numbers, dot or underline characters
- Start with letter or the dot not followed by a number
- Some names are forbidden (ex. `if`, `else`, `TRUE`, `FALSE`)
- Correct: valid.name, valid_name, valid2name3
- Incorrect: valid name, valid-name, 1valid2name3
:::

::: {.fragment}
::: {.callout-tip}
Avoid random names such as `var1`, `var2`. Use significant names: `gene_list`, `nb_elements`
:::
:::

## Objects - Assign a value

::: { .callout appearance="simple" }
The name of the object followed by the assignment symbol and the value.
:::

::: {.fragment}
```{r}
#| echo: true
valid.name_123 = 2
valid.name_123

valid.name_123 <- 2
valid.name_123

valid.name_123 = 4
valid.name_123
```
:::

## Objects - Arithmetic operators

::: { .callout appearance="simple" }
You can use operators on objects to modify them. Depending on the object format, operators have different behaviors and some are forbidden.

::: {.columns}
::: {.column}
- addition: `+`
- substraction: `-`
- multiplication: `*`
- division: `/`
- exponent: `^` or `**`
- integer division: `%/%`
- modulo: `%%`
:::
::: {.column}
```{r}
#| echo: true
2+3
5-2
4*3
10/2
2^3
10%/%3
10%%3
```
:::
:::
:::

## Objects - Arithmetic operators

::: { .callout appearance="simple" }
### Exercise

1. Create a numeric object
2. Multiply it by 6
3. Add 21
4. Divide it by 3
5. Substract 1
6. Halve it
7. Substract its original value
:::

## Objects - Arithmetic operators

::: { .callout appearance="simple" }
### Correction
:::

```{r}
#| echo: true
my_number = 42
my_new_number = my_number * 6
my_new_number = my_new_number + 21
my_new_number = my_new_number / 3
my_new_number = my_new_number - 1
my_new_number = my_new_number / 2
my_new_number = my_new_number - my_number
my_new_number
```

## Objects - Arithmetic operators

::: { .callout appearance="simple" }
### Exercise

Try to raise errors using operators.
:::

::: { .fragment }
```{r}
#| echo: true
#"Six" * "Three"
5/0
0/0

```
:::

## Objects - Function

::: { .callout appearance="simple" }
- A function is a tool to create or modify an object
- Format: `function_name(object, parameter1 = ..., parameter2 = ...)`
- Read the help manual to know more about a function (`help`, `?` or `F1`)
:::
::: { .fragment }
```{r}
#| echo: true
sqrt(9)
sqrt.valid.name_123 = sqrt(valid.name_123)
sqrt.valid.name_123
```
```{.r}
help(sqrt)
?sqrt
```
:::

::: {.fragment}
::: {.callout-note}
Some functions are in the default installation of R. Other functions come from packages. You can also create your own functions.
:::
:::

# Vectors

## Vectors {auto-animate=true}

::: { .callout appearance="simple" }
### vector construction
- `c()` Concatenate function
- `1:10` Vector with numbers from 1 to 10
:::

```{r}
#| echo: true
luckyNumbers = c(4,8,15,16,23,42)
luckyNumbers

oneToTen = 1:10
oneToTen

tenOnes = rep(1,10)
tenOnes

samples = c("sampA", "sampB")
samples
```

## Vectors {auto-animate=true}

::: { .callout appearance="simple" }
### vector construction
- `c()` Concatenate function
- `1:10` Vector with numbers from 1 to 10
:::

::: { .callout-tip}
### Extra
- `seq` Create a sequence of numbers
- `rep` Repeat elements several times
- `runif` Simulate random numbers from Uniform distribution. Same for `rnorm`, `rpois`...
:::

## Exercise - Create some vectors

::: { .callout appearance="simple" }
### Instructions
- Create a `vector` withe 7 *numeric* values
- Create a `vector` with 7 *character* values
:::

## Vectors

::: { .callout appearance="simple" }
### Manipulation

Using index/position between []
:::

::: { .callout appearance="simple" }
### Characterization

- `length()` Number of elements in the vector
- `names()` Get or set the names of the vector's value
:::
```{r}
#| echo: true
luckyNumbers[3]
luckyNumbers[2:4]
luckyNumbers[2:4] = c(14,3,9)
luckyNumbers

length(luckyNumbers)

names(luckyNumbers)
names(luckyNumbers) = c("frank", "henry", "philip", "steve", "tom", "francis")
names(luckyNumbers)
luckyNumbers["philip"]
```

## Vectors

::: { .callout appearance="simple" }
### Manipulation

- `sort()` Sort a vector
- `sample()` Shuffle a vector
- `rev()` Reverse a vector
:::

```{r}
#| echo: true
luckyNumbers
sort(luckyNumbers)
sort(c(luckyNumbers, 1:10))
rev(luckyNumbers)
sample(1:10)
```

::: { .callout-tip }
### Extra

- `sort()/sample()` Explore extra parameters
- `order()`  Get the index of the sorted elements
:::

## Vectors

::: { .callout appearance="simple" }
### Exploration

- `head()/tail()` Print the first/last values
- `summary()` Summary statistics
- `min()/max()/mean()/median()/var()` Minimum, maximum, average, median, variance
- `sum` Sum of the vector's values
:::

```{r}
#| echo: true
head(samples)
summary(luckyNumbers)
mean(luckyNumbers)
min(luckyNumbers)
```

::: { .callout-tip }
### Extra

- `log/log2/log10` Logarithm functions
- `sqrt`  Square-root function
:::

## Vectors

::: { .callout appearance="simple" }
### Arithmetic operators

- Simple arithmetic operations over all the values of the vector
- Or values by values when using vectors of same length
- Arithmetic operations: +, -, *, /
- Other exist but let's forget about them for now 
:::

```{r}
#| echo: true
luckyNumbers + 2
luckyNumbers * 4
luckyNumbers - luckyNumbers
luckyNumbers / 1:length(luckyNumbers)
```

## Exercise - Guess my favorite number

::: { .callout appearance="simple" }
### Instructions

1. Create a vector with 5 numeric values
2. Multiply it by 6
3. Add 21
4. Divide it by 3
5. Substract 1
6. Halve it
7. Substract its original values
:::

::: {.fragment}
```{r}
#| echo: true
my_numbers = rnorm(5)
my_favorite_number = my_numbers*6
my_favorite_number = my_favorite_number + 21
my_favorite_number = my_favorite_number / 3
my_favorite_number = my_favorite_number - 1
my_favorite_number = my_favorite_number / 2
my_favorite_number - my_numbers
```
:::